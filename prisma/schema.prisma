generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
     id       String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String         @unique
  password      String
  name          String
  image         String?
  phone         String?
  streetAddress String?
  postalCode    String?
  city          String?
  country       String?
  role          UserRole       @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  orders        OrderProduct[]
  accounts      Account[]
  sessions      Session[]
}

model Session {
   id        String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
   userId   String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationRequest {
   id        String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Account {
   id        String @id @default(auto()) @map("_id") @db.ObjectId
 userId   String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}
model Order {
   id        String @id @default(auto()) @map("_id") @db.ObjectId
  paid          Boolean        @default(false)
  subTotal      Float
  deliveryFee   Float
  totalPrice    Float
  userEmail     String
  phone         String
  streetAddress String
  postalCode    String
  city          String
  country       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  products      OrderProduct[]
}

model Category {
id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  order     Int      @default(0)
  products  Product[]
}

model Product {
 id        String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  image       String
  order        Int  
  basePrice   Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  sizes       Size[]
  extras      Extra[]
  orders      OrderProduct[]
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String   @db.ObjectId
}

model OrderProduct {
id        String @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int

  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String   @db.ObjectId

  user      User?   @relation(fields: [userId], references: [id])
  userId String   @db.ObjectId

  product   Product @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
}




model Size {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      ProductSizes
  price     Float
  product   Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
}

model Extra {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      ExtraIngredients
  price     Float
  product   Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
}

enum ProductSizes {
  SMALL
  MEDIUM
  LARGE
}

enum ExtraIngredients {
  CHEESE
  BACON
  TOMATO
  ONION
  PEPPER
}

enum UserRole {
  USER
  ADMIN
}